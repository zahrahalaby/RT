"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPopupMessage = exports.setPopupClosed = exports.setPopupOpen = exports.removePopup = exports.addPopup = void 0;
var utils_1 = require("./utils");
function addPopup(popups, key, renderer, confirmResolver) {
    var _a;
    if (popups[key]) {
        return popups;
    }
    return __assign(__assign({}, popups), (_a = {}, _a[key] = {
        renderer: renderer,
        open: false,
        confirmResolver: confirmResolver,
    }, _a));
}
exports.addPopup = addPopup;
function removePopup(popups, key) {
    if (!popups[key]) {
        return popups;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    var _a = popups, _b = key, _ = _a[_b], updatedPopups = __rest(_a, [typeof _b === "symbol" ? _b : _b + ""]);
    return updatedPopups;
}
exports.removePopup = removePopup;
function togglePopupOpenState(popups, key, value) {
    var _a;
    utils_1.enforceExistingPopup(popups, key);
    return __assign(__assign({}, popups), (_a = {}, _a[key] = __assign(__assign({}, popups[key]), { open: value }), _a));
}
function setPopupOpen(popups, key) {
    utils_1.enforceExistingPopup(popups, key);
    return togglePopupOpenState(popups, key, true);
}
exports.setPopupOpen = setPopupOpen;
function setPopupClosed(popups, key) {
    utils_1.enforceExistingPopup(popups, key);
    return togglePopupOpenState(popups, key, false);
}
exports.setPopupClosed = setPopupClosed;
function setPopupMessage(popups, key, message) {
    var _a;
    utils_1.enforceExistingPopup(popups, key);
    return __assign(__assign({}, popups), (_a = {}, _a[key] = __assign(__assign({}, popups[key]), { message: message }), _a));
}
exports.setPopupMessage = setPopupMessage;
