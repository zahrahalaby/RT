"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PopupProvider = void 0;
var react_1 = __importStar(require("react"));
var PopupContext_1 = require("./PopupContext");
var reducers_1 = require("./utils/reducers");
var PopupProvider = function (_a) {
    var children = _a.children;
    var _b = react_1.useState({}), popups = _b[0], setPopups = _b[1];
    var registerPopup = function (key, popupRenderer, confirmResolver) {
        setPopups(function (previous) { return reducers_1.addPopup(previous, key, popupRenderer, confirmResolver); });
    };
    var unRegisterPopup = function (key) {
        setPopups(function (previous) { return reducers_1.removePopup(previous, key); });
    };
    var displayPopup = function (key, message) {
        setPopups(function (previous) { return reducers_1.setPopupOpen(previous, key); });
        setPopups(function (previous) { return reducers_1.setPopupMessage(previous, key, message); });
    };
    var closePopup = function (key) {
        setPopups(function (previous) { return reducers_1.setPopupClosed(previous, key); });
    };
    return (react_1.default.createElement(PopupContext_1.PopupContext.Provider, { value: {
            registerPopup: registerPopup,
            unRegisterPopup: unRegisterPopup,
            displayPopup: displayPopup,
            closePopup: closePopup,
        } },
        children,
        Object.entries(popups).map(function (_a) {
            var _b;
            var key = _a[0], popup = _a[1];
            return (popup.open &&
                react_1.default.cloneElement((_b = popup.renderer) === null || _b === void 0 ? void 0 : _b.call(popup, {
                    message: popup.message,
                    handleClose: function () { return closePopup(key); },
                    confirm: function () {
                        popup.confirmResolver(true);
                        closePopup(key);
                    },
                    cancel: function () {
                        popup.confirmResolver(false);
                        closePopup(key);
                    },
                }), { key: key }));
        })));
};
exports.PopupProvider = PopupProvider;
